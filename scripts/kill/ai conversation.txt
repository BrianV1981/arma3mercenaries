ok, the script broke.

I am reverting manually. I am updating you with the 3 relevent scripts.

/*
________________	Author : GEORGE FLOROS [GR]	___________	30.07.19	___________

________________ GF Killfeed Script ________________

https://forums.bohemia.net/forums/topic/206593-headshot-killfeed-script/

________________	Enhanced by : BrianV1981	___________	8/10/2024 ___________

________________ arma3mercenaries Kill Script: Kill Notification, Kill Reward, & Death Marker Script ________________

https://forums.bohemia.net/forums/topic/134991-death-marker-script
https://forums.bohemia.net/forums/topic/211383-trigger-on-enemy-death/
https://forums.bohemia.net/forums/topic/225166-help-killed-event-handler/
https://community.bistudio.com/wiki/BIS_fnc_sideID
https://github.com/gruppe-adler/grad-moneyMenu/wiki/addFunds

[unit, amount, addToBankAccount] call grad_moneymenu_fnc_addFunds

Parameter -	Explanation
unit -	Object - The unit or storage object to add or detract from.
amount -	Number - The Amount to add. Negative value to subtract. Total funds will never go below 0.
addToBankAccount (optional)	Bool - Use true to add the amount to the unit's bank account instead of his wallet.

Example
[this, -2000] call grad_moneymenu_fnc_addFunds; // subtracts 2000 from this objects wallet
[storageBox, 100] call grad_moneymenu_fnc_addFunds; // adds 100 to storageBox
[player, 1500, true] call grad_moneymenu_fnc_addFunds; // adds 1500 to unit/player bank

# **Script Summary: arma3mercenaries Killfeed, Reward, and Death Marker System**

## **Overview**
This script manages killfeed notifications, rewards and penalties, and death markers for both AI and player-controlled units in an Arma 3 mission. It handles various scenarios based on the faction of the killed unit and applies appropriate rewards or penalties. The script also creates markers on the map to indicate where a player or AI unit was killed, enhancing the tactical experience of the mission.

## **Core Logic Breakdown**

### **Local Instigator Check**
- The script verifies if the `_instigator` (the unit responsible for the kill) is local to the machine, ensuring that only relevant scenarios are processed.
- It also checks if the killed unit is a human-like entity (`CAManBase`), limiting the script's application to appropriate scenarios.

### **Determine Sides of Killer and Killed Unit**
- The script determines the faction (side) of both the killer and the killed unit by checking their configuration in the game.
- These values are stored in `_sideKiller` and `_sideKilled`.

### **Determine Name and Color of Killed Unit**
- The script retrieves the name and color associated with the killed unit.
  - For AI units, it uses the display name from the game’s configuration.
  - For player units, it uses the player’s in-game name.
- The color of the unit is determined based on their faction and is stored in `_killed_Color`.

### **Calculate Distance Between Killer and Killed Unit**
- The script calculates the distance between the killer and the killed unit, storing this value in `_distance`.

### **Retrieve Weapon Information**
- The weapon used for the kill is identified, and its display name is retrieved from the game’s configuration.
- If no weapon picture is available, the script checks for the vehicle used by the instigator.

### **Friendly Fire Detection**
- If the killer and the killed unit belong to the same faction (friendly fire) and the killer is a player:
  - The script deducts a specified amount of credits from the player’s bank account as a penalty.
  - A hint is sent to the player informing them of the friendly fire incident and the penalty.
- If a player is killed by friendly fire, they receive a specified amount of credits to their bank account (as compensation). A hint is sent to the player with details about the incident.

## **Side-Based Reward and Penalty Logic**

### **Case 0: OPFOR Killed**
- **Reward:** 
  - The killer (player or AI) receives a random reward of up to the configured amount of credits added to their wallet.
  - If the killer is a player, they receive an on-screen hint about the reward.
- **Additional Feature:** 
  - The killed OPFOR unit receives a random amount of credits in their wallet, making their corpse lootable.
- **Killfeed:** 
  - A HUD notification displays the name and distance of the killed OPFOR unit.
- **Death Marker:** 
  - If a player kills an OPFOR AI unit, a red death marker is placed on the map at the location of the kill, labeled with the faction name, killer’s name, weapon used, and the distance.

### **Case 1: NATO Killed**
- **Reward/Penalty:** 
  - If the killer is OPFOR, they receive a reward of up to the configured amount of credits added to their wallet.
  - If the killer is NATO (friendly fire), they are penalized with a specified credit deduction from their bank account, and a hint is shown.
- **Additional Feature:** 
  - The killed NATO unit receives a random amount of credits in their wallet.
- **Killfeed:** 
  - A HUD notification displays the kill information.
- **Death Marker:** 
  - If a player kills a NATO AI unit, a blue death marker is placed on the map, labeled with the faction name, killer’s name, weapon used, and the distance.

### **Case 2: Independent Killed**
- **Reward/Penalty:** 
  - If the killer is OPFOR, they receive a reward of up to the configured amount of credits added to their wallet.
  - If the killer is NATO (NATO allied), they are penalized with a specified credit deduction from their bank account, and a hint is shown.
- **Additional Feature:** 
  - The killed Independent unit receives a random amount of credits in their wallet.
- **Killfeed:** 
  - A HUD notification displays the kill information.
- **Death Marker:** 
  - If a player kills an Independent AI unit, a green death marker is placed on the map, labeled with the faction name, killer’s name, weapon used, and the distance.

### **Case 3: Civilian Killed**
- **Penalty:** 
  - The killer, regardless of side, is penalized with a specified credit deduction from their bank account, and a hint is shown.
- **Additional Feature:** 
  - The killed Civilian unit receives a random amount of credits in their wallet.
- **Killfeed:** 
  - A HUD notification displays the kill information.
- **Death Marker:** 
  - If a player kills a Civilian AI unit, a purple death marker is placed on the map, labeled with the faction name, killer’s name, weapon used, and the distance.

## **Additional Features**

### **Killfeed HUD Notification**
- A visual HUD notification is displayed for every kill, showing the name and distance of the killed unit.

### **Sound Notification**
- A sound is played whenever a kill is registered.

### **AI Death Marker**
- A death marker is placed on the map for the last AI unit killed by a player. The marker’s color corresponds to the side of the killed unit, and the label includes the faction name, killer’s name, weapon used, and distance.

### **Player Death Marker**
- If a player is killed, a red warning marker is placed on the map at their death location, displaying the player’s name.

### **Death Penalty**
- If a player dies, they receive a financial penalty deducted from their bank account, and a hint is displayed informing them of the deduction.

## **In-Game Experience**
- **Rewards and Penalties:** 
  - Players and AI units receive financial rewards or penalties based on their actions, such as killing enemy units, committing friendly fire, or killing civilians.
- **Killfeed:** 
  - Players receive immediate visual feedback about their kills through HUD notifications, enhancing the gameplay experience.
- **Death Markers:** 
  - Markers placed on the map provide visual cues for the locations of recent kills, helping players track significant events during the mission.
- **Death Penalty:** 
  - Players face financial consequences for dying, encouraging more careful and strategic gameplay.

*This comprehensive system is designed to enhance the tactical and immersive aspects of arma3mercenaries missions by rewarding or penalizing actions based on faction dynamics while also providing players with clear and immediate feedback through visual and audio notifications.*


*/

diag_log "//________________ arma3mercenaries Kill Notification, Kill Reward, & Death Marker Script ________________";

addMissionEventHandler ["entityKilled", {
    params ["_killed", "_killer", "_instigator"];
    
    // If the instigator is null (e.g., road kill), set the killer as the instigator
    if (isNull _instigator) then { _instigator = _killer };

    // Check if the instigator is local to the machine and the killed unit is a human-like unit
    if (local _instigator && _killed isKindOf "CAManBase") then {
        // Determine the sides of the killer and the killed unit
        private _sideKiller = getNumber (configFile >> "cfgVehicles" >> typeOf _instigator >> "side");
        private _sideKilled = getNumber (configFile >> "cfgVehicles" >> typeOf _killed >> "side");

        // Determine the name and color of the killed unit
        private _killed_Name = "";
        private _kill_HUD = "";
        private _killed_Color = (side group _killed call BIS_fnc_sideColor) call BIS_fnc_colorRGBtoHTML;

        // If the killed unit is AI, get its display name from the config
        if (!(isPlayer _killed)) then {
            _killed_Name = getText (configFile >> "CfgVehicles" >> format["%1", typeOf _killed] >> "Displayname");
        } else {
            // If the killed unit is a player, use their in-game name
            _killed_Name = name _killed;
        };

        // Calculate the distance between the killer and the killed unit
        private _distance = _instigator distance2D _killed;

        // Get the weapon used for the kill and its display name
        private _weaponClass = currentWeapon _instigator;
        private _weaponDisplayName = getText(configFile >> "CfgWeapons" >> _weaponClass >> "displayName");

        // Get the weapon picture or vehicle picture if no weapon picture is available
        private _pictureweapon = getText(configFile >> "CfgWeapons" >> _weaponClass >> "picture");
        if (_pictureweapon == "") then {
            _weaponClass = typeOf (vehicle _instigator);
            _pictureweapon = getText(configFile >> "CfgVehicles" >> _weaponClass >> "picture");
        };

        // Get a readable name for the faction
        private _factionName = switch (_sideKilled) do {
            case 0: { "OPFOR" };
            case 1: { "NATO" };
            case 2: { "Independent" };
            case 3: { "Civilian" };
            default { "Unknown Faction" };
        };

        // Check if the kill was friendly fire (same side) and the instigator is a player
        if (_sideKiller == _sideKilled && isPlayer _instigator) then {
            // **Friendly Fire Penalty (Configurable via CBA)**
            private _friendlyFirePenalty = arma3mercenaries_friendlyFirePenalty;
            [_instigator, -_friendlyFirePenalty, true] call grad_moneymenu_fnc_addFunds;

            // Send a hint to the instigator about the friendly fire
            private _message = format ["You killed a member of %1! %2 cr. has been deducted from your bank account.", _factionName, _friendlyFirePenalty];
            if (arma3mercenaries_silentHints) then {
                [_message] remoteExec ["hintSilent", _instigator];
            };
        };

        // Check if the player was killed by friendly fire
        if (isPlayer _killed && _sideKiller == _sideKilled && _instigator != _killed) then {
            // **Friendly Fire Compensation (Configurable via CBA)**
            private _friendlyFireCompensation = arma3mercenaries_friendlyFireCompensation;
            [_killed, _friendlyFireCompensation, true] call grad_moneymenu_fnc_addFunds;

            // Send a direct message to the player about the friendly fire
            private _message = format ["%1 were killed by friendly fire by %2 with a %3 from %4m. %5 cr. has been wired to your bank account.", name _killed, name _instigator, _weaponDisplayName, floor _distance, _friendlyFireCompensation];
            if (arma3mercenaries_silentHints) then {
                [_message] remoteExec ["hintSilent", _killed];
            };
        };

        // Switch-case structure to handle different scenarios based on the side of the killed unit
        switch (_sideKilled) do {
            case 0: {
                // OPFOR unit killed
                // **OPFOR Kill Reward (Configurable via CBA)**
                private _opforKillLoot = arma3mercenaries_opforKillReward;
                [_instigator, random _opforKillLoot] call grad_moneymenu_fnc_addFunds;

                // If the instigator is a player, send them a hint about the reward
                if (isPlayer _instigator) then {
                    private _message = format ["You killed a member of %1, good job! 0-%2 cr. has been added to your wallet. Don't forget to check the corpse for more money!", _factionName, _opforKillLoot];
                    if (arma3mercenaries_silentHints) then {
                        [_message] remoteExec ["hintSilent", _instigator];
                    };
                };

                // **OPFOR AI Wallet Amount (Configurable via CBA)**
                private _opforAiWallet = arma3mercenaries_opforAiWallet;
                [_killed, random _opforAiWallet] call grad_moneymenu_fnc_addFunds;
            };
            case 1: {
                // NATO unit killed
                if (_sideKiller == 0) then {
                    // OPFOR killed NATO
                    // **NATO Kill Reward (Configurable via CBA)**
                    private _natoKillReward = arma3mercenaries_natoKillReward;
                    [_instigator, random _natoKillReward] call grad_moneymenu_fnc_addFunds;

                    // If the instigator is a player, send them a hint about the reward
                    if (isPlayer _instigator) then {
                        private _message = format ["You killed a member of %1, good job! 0-%2 cr. has been added to your wallet.", _factionName, _natoKillReward];
                        if (arma3mercenaries_silentHints) then {
                            [_message] remoteExec ["hintSilent", _instigator];
                        };
                    };
                };

                // **NATO AI Wallet Amount (Configurable via CBA)**
                private _natoAiWallet = arma3mercenaries_natoAiWallet;
                if (!isPlayer _killed) then {
                    [_killed, random _natoAiWallet] call grad_moneymenu_fnc_addFunds;
                };
            };
            case 2: {
                // Independent unit killed
                if (_sideKiller == 0) then {
                    // OPFOR killed Independent
                    // **Independent Kill Reward (Configurable via CBA)**
                    private _independentKillReward = arma3mercenaries_independentKillReward;
                    [_instigator, random _independentKillReward] call grad_moneymenu_fnc_addFunds;

                    // If the instigator is a player, send them a hint about the reward
                    if (isPlayer _instigator) then {
                        private _message = format ["You killed a member of %1, good job! 0-%2 cr. has been added to your wallet.", _factionName, _independentKillReward];
                        if (arma3mercenaries_silentHints) then {
                            [_message] remoteExec ["hintSilent", _instigator];
                        };
                    };
                } else {
                    // NATO killed Independent (NATO allied)
                    // **NATO Penalty for Killing Independent (Configurable via CBA)**
                    private _natoPenaltyIndependent = arma3mercenaries_natoPenaltyIndependent;
                    [_instigator, -_natoPenaltyIndependent, true] call grad_moneymenu_fnc_addFunds;

                    // If the instigator is a player, send them a hint about the penalty
                    if (isPlayer _instigator) then {
                        private _message = format ["You killed a member of %1! %2 cr. has been deducted from your bank account.", _factionName, _natoPenaltyIndependent];
                        if (arma3mercenaries_silentHints) then {
                            [_message] remoteExec ["hintSilent", _instigator];
                        };
                    };
                };

                // **Independent AI Wallet Amount (Configurable via CBA)**
                private _independentAiWallet = arma3mercenaries_independentAiWallet;
                if (!isPlayer _killed) then {
                    [_killed, random _independentAiWallet] call grad_moneymenu_fnc_addFunds;
                };
            };
            case 3: {
                // Civilian unit killed
                // **Civilian Kill Penalty (Configurable via CBA)**
                private _civilianKillPenalty = arma3mercenaries_civilianKillPenalty;
                [_instigator, -_civilianKillPenalty, true] call grad_moneymenu_fnc_addFunds;

                // If the instigator is a player, send them a hint about the penalty
                if (isPlayer _instigator) then {
                    private _message = format ["You killed a member of %1! %2 cr. has been deducted from your bank account.", _factionName, _civilianKillPenalty];
                    if (arma3mercenaries_silentHints) then {
                        [_message] remoteExec ["hintSilent", _instigator];
                    };
                };

                // **Civilian AI Wallet Amount (Configurable via CBA)**
                private _civilianAiWallet = arma3mercenaries_civilianAiWallet;
                if (!isPlayer _killed) then {
                    [_killed, random _civilianAiWallet] call grad_moneymenu_fnc_addFunds;
                };
            };
        };

        // **Killfeed HUD Display Duration (Configurable via CBA)**
        if (isPlayer _instigator) then {
            private _killFeedDuration = arma3mercenaries_killFeedDuration;
            _kill_HUD = format["<t size='0.3'>  Killed  <t size='0.5'> <t color='%1'>  %2  <t color='#%1'>  %3 m</t>", _killed_Color, _killed_Name, floor _distance];
            [_kill_HUD, 0, 0, _killFeedDuration, 1, -1, 7017] spawn bis_fnc_dynamicText;

            // **Killfeed Sound (Configurable via CBA)**
            private _killSoundEnabled = arma3mercenaries_killNotificationSound;
            if (_killSoundEnabled) then {
                playSound "Killfeed_notification";
            };
        };

        // **Death Marker Size (Configurable via CBA)**
        if (!isPlayer _killed && isPlayer _instigator) then {
            private _mrkName = "LastEnemyKilled";
            // Delete any existing marker with the same name
            deleteMarker _mrkName;

            // Determine the marker color based on the side of the killed unit
            private _markerColor = switch (_sideKilled) do {
                case 0: { "ColorEAST" };         // OPFOR
                case 1: { "ColorWEST" };        // NATO
                case 2: { "colorIndependent" }; // Independent
                case 3: { "ColorCIV" };         // Civilian
            };

            // Create a new marker at the AI's position
            private _markerSize = arma3mercenaries_markerSize;
            private _m = createMarker [_mrkName, getPosATL _killed];
            // Set the shape of the marker to an icon
            _m setMarkerShape "ICON";
            // Set the type of the marker to a dot icon
            _m setMarkerType "mil_dot";
            // Set the color of the marker based on the killed unit's side
            _m setMarkerColor _markerColor;
            // Set the size of the marker
            _m setMarkerSize [_markerSize, _markerSize];
            // Set the text of the marker to include the faction, killer’s name, weapon used, and distance
            _m setMarkerText format ["%1 killed by %2 with a %3 from %4m", _factionName, name _instigator, _weaponDisplayName, floor _distance];
        };

        // Player Death Marker - Only for non-AI players
        if (isPlayer _killed) then {
            private _mrkName = format ["%1", name _killed];
            // Delete any existing marker with the same name
            deleteMarker _mrkName;

            // Create a new marker at the player's position
            private _markerSize = arma3mercenaries_markerSize;
            private _m = createMarker [_mrkName, getPosATL _killed];
            // Set the shape of the marker to an icon
            _m setMarkerShape "ICON";
            // Set the type of the marker to a warning icon
            _m setMarkerType "mil_warning";
            // Set the color of the marker to red
            _m setMarkerColor "ColorRed";
            // Set the size of the marker
            _m setMarkerSize [_markerSize, _markerSize];
            // Set the text of the marker to the player's name
            _m setMarkerText name _killed;
        };
    };

    // **Death Penalty Amount (Configurable via CBA)**
    if (isPlayer _killed && _sideKiller != _sideKilled) then {
        private _deathPenalty = arma3mercenaries_deathPenalty;
        [_killed, -_deathPenalty, true] call grad_moneymenu_fnc_addFunds;

        // Send a hint to the killed player notifying them of the penalty
        private _message = format ["You died! %1 cr. has been deducted from your bank account.", _deathPenalty];
        if (arma3mercenaries_silentHints) then {
            [_message] remoteExec ["hintSilent", _killed];
        };
    };
}];



/*

arma3mercenaries_killCfg.hpp

by BrianV1981

*/

class CfgSettings {
    class CBA {
        class arma3mercenaries {

            // Killfeed Display Duration
            class killFeedDuration {
                title = "Killfeed Display Duration";
                description = "Adjust the duration (in seconds) the killfeed notification remains on screen.";
                typeName = "NUMBER";
                value = 5; // Default value
                values[] = {1, 20}; // Min: 1 second, Max: 20 seconds
            };

            // Friendly Fire Penalty (Bank)
            class friendlyFirePenalty {
                title = "Friendly Fire Penalty (Bank)";
                description = "Sets the amount of credits deducted from the player's bank account for friendly fire incidents.";
                typeName = "NUMBER";
                value = 10000; // Default value
                values[] = {0, 100000}; // Min: 0 credits, Max: 100000 credits
            };

            // Friendly Fire Compensation (Bank)
            class friendlyFireCompensation {
                title = "Friendly Fire Compensation (Bank)";
                description = "Sets the amount of credits awarded to a player when killed by friendly fire. Credits are added to the player's bank account.";
                typeName = "NUMBER";
                value = 20000; // Default value
                values[] = {0, 100000}; // Min: 0 credits, Max: 100000 credits
            };

            // OPFOR Kill Reward (Random, Wallet)
            class opforKillReward {
                title = "OPFOR Kill Reward (Random, Wallet)";
                description = "Sets the maximum random amount of credits awarded for killing an OPFOR unit. Credits are added to the player's wallet.";
                typeName = "NUMBER";
                value = 10000; // Default value
                values[] = {0, 100000}; // Min: 0 credits, Max: 100000 credits
            };

            // OPFOR AI Wallet Amount (Random, Wallet)
            class opforAiWallet {
                title = "OPFOR AI Wallet Amount (Random, Wallet)";
                description = "Sets the maximum random amount of credits found on a killed OPFOR AI unit. Credits are added to the AI unit's wallet.";
                typeName = "NUMBER";
                value = 10000; // Default value
                values[] = {0, 100000}; // Min: 0 credits, Max: 100000 credits
            };

            // NATO Kill Reward (Random, Wallet)
            class natoKillReward {
                title = "NATO Kill Reward (Random, Wallet)";
                description = "Sets the maximum random amount of credits awarded for killing a NATO unit. Credits are added to the player's wallet.";
                typeName = "NUMBER";
                value = 10000; // Default value
                values[] = {0, 100000}; // Min: 0 credits, Max: 100000 credits
            };

            // NATO AI Wallet Amount (Random, Wallet)
            class natoAiWallet {
                title = "NATO AI Wallet Amount (Random, Wallet)";
                description = "Sets the maximum random amount of credits found on a killed NATO AI unit. Credits are added to the AI unit's wallet.";
                typeName = "NUMBER";
                value = 1000; // Default value
                values[] = {0, 100000}; // Min: 0 credits, Max: 100000 credits
            };

            // Independent Kill Reward (Random, Wallet)
            class independentKillReward {
                title = "Independent Kill Reward (Random, Wallet)";
                description = "Sets the maximum random amount of credits awarded for killing an Independent unit. Credits are added to the player's wallet.";
                typeName = "NUMBER";
                value = 10000; // Default value
                values[] = {0, 100000}; // Min: 0 credits, Max: 100000 credits
            };

            // Independent AI Wallet Amount (Random, Wallet)
            class independentAiWallet {
                title = "Independent AI Wallet Amount (Random, Wallet)";
                description = "Sets the maximum random amount of credits found on a killed Independent AI unit. Credits are added to the AI unit's wallet.";
                typeName = "NUMBER";
                value = 1000; // Default value
                values[] = {0, 100000}; // Min: 0 credits, Max: 100000 credits
            };

            // NATO Penalty for Killing Independent (Bank)
            class natoPenaltyIndependent {
                title = "NATO Penalty for Killing Independent (Bank)";
                description = "Sets the amount of credits deducted from a NATO player's bank account for killing an Independent unit.";
                typeName = "NUMBER";
                value = 10000; // Default value
                values[] = {0, 100000}; // Min: 0 credits, Max: 100000 credits
            };

            // Civilian Kill Penalty (Bank)
            class civilianKillPenalty {
                title = "Civilian Kill Penalty (Bank)";
                description = "Sets the amount of credits deducted from a player's bank account for killing a civilian.";
                typeName = "NUMBER";
                value = 10000; // Default value
                values[] = {0, 100000}; // Min: 0 credits, Max: 100000 credits
            };

            // Civilian AI Wallet Amount (Random, Wallet)
            class civilianAiWallet {
                title = "Civilian AI Wallet Amount (Random, Wallet)";
                description = "Sets the maximum random amount of credits found on a killed Civilian AI unit. Credits are added to the AI unit's wallet.";
                typeName = "NUMBER";
                value = 1000; // Default value
                values[] = {0, 100000}; // Min: 0 credits, Max: 100000 credits
            };

            // Death Penalty Amount (Bank)
            class deathPenalty {
                title = "Death Penalty Amount (Bank)";
                description = "Sets the amount of credits deducted from the player's bank account when they die.";
                typeName = "NUMBER";
                value = 10000; // Default value
                values[] = {0, 100000}; // Min: 0 credits, Max: 100000 credits
            };

            // Marker Size
            class markerSize {
                title = "Death Marker Size";
                description = "Sets the size of the death markers on the map.";
                typeName = "NUMBER";
                value = 0.5; // Default value
                values[] = {0.1, 2}; // Min: 0.1, Max: 2
            };

            // Kill Notification Sound Toggle
            class killNotificationSound {
                title = "Enable Kill Notification Sound";
                description = "Toggles the sound notification that plays when a kill is registered.";
                typeName = "BOOL";
                value = 1; // Default value: 1 (enabled)
            };

            // Silent Hints Toggle
            class silentHints {
                title = "Enable Silent Hints";
                description = "Toggles the display of silent hints related to kill rewards and penalties.";
                typeName = "BOOL";
                value = 1; // Default value: 1 (enabled)
            };

            // Killfeed Enabled Toggle
            class killFeedEnabled {
                title = "Enable Killfeed";
                description = "Toggles the display of the killfeed notification.";
                typeName = "BOOL";
                value = 1; // Default value: 1 (enabled)
            };
        };
    };
};



// XEH_postInit.sqf
// Initialize CBA settings for arma3mercenaries
if (isServer) then {
    ["initialize", "arma3mercenaries"] call CBA_settings_fnc_init;
};

// CBA settings for arma3mercenaries Kill Script
[
    "arma3mercenaries_killFeedDuration", // Internal setting name
    "SLIDER", // setting type
    ["Killfeed Display Duration", "Adjust the duration (in seconds) the killfeed notification remains on screen."], // Pretty name and description
    "arma3mercenaries", // Category
    [1, 20, 5, 1], // data for this setting: [min, max, default, number of shown trailing decimals]
    1, // "_isGlobal" flag
    {} // function that will be executed once on mission start and every time the setting is changed.
] call CBA_fnc_addSetting;

[
    "arma3mercenaries_friendlyFirePenalty", // Internal setting name
    "SLIDER", // setting type
    ["Friendly Fire Penalty (Bank)", "Set the amount of credits deducted for friendly fire incidents from the player's bank account."], // Pretty name and description
    "arma3mercenaries", // Category
    [0, 100000, 10000, 1000], // data for this setting: [min, max, default, step size]
    1, // "_isGlobal" flag
    {} // function that will be executed once on mission start and every time the setting is changed.
] call CBA_fnc_addSetting;

[
    "arma3mercenaries_friendlyFireCompensation", // Internal setting name
    "SLIDER", // setting type
    ["Friendly Fire Compensation (Bank)", "Set the amount of credits awarded to a player when killed by friendly fire. Credits are added to the player's bank account."], // Pretty name and description
    "arma3mercenaries", // Category
    [0, 100000, 20000, 1000], // data for this setting: [min, max, default, step size]
    1, // "_isGlobal" flag
    {} // function that will be executed once on mission start and every time the setting is changed.
] call CBA_fnc_addSetting;

[
    "arma3mercenaries_opforKillReward", // Internal setting name
    "SLIDER", // setting type
    ["OPFOR Kill Reward (Random, Wallet)", "Set the maximum random amount of credits awarded for killing an OPFOR unit. Credits are added to the player's wallet."], // Pretty name and description
    "arma3mercenaries", // Category
    [0, 100000, 10000, 1000], // data for this setting: [min, max, default, step size]
    1, // "_isGlobal" flag
    {} // function that will be executed once on mission start and every time the setting is changed.
] call CBA_fnc_addSetting;

[
    "arma3mercenaries_opforAiWallet", // Internal setting name
    "SLIDER", // setting type
    ["OPFOR AI Wallet Amount (Random, Wallet)", "Set the amount of random credits awarded to a killed OPFOR AI unit. Credits are added to the AI unit's wallet."], // Pretty name and description
    "arma3mercenaries", // Category
    [0, 100000, 10000, 1000], // data for this setting: [min, max, default, step size]
    1, // "_isGlobal" flag
    {} // function that will be executed once on mission start and every time the setting is changed.
] call CBA_fnc_addSetting;

[
    "arma3mercenaries_natoKillReward", // Internal setting name
    "SLIDER", // setting type
    ["NATO Kill Reward (Random, Wallet)", "Set the maximum random amount of credits awarded for killing a NATO unit. Credits are added to the player's wallet."], // Pretty name and description
    "arma3mercenaries", // Category
    [0, 100000, 10000, 1000], // data for this setting: [min, max, default, step size]
    1, // "_isGlobal" flag
    {} // function that will be executed once on mission start and every time the setting is changed.
] call CBA_fnc_addSetting;

[
    "arma3mercenaries_natoAiWallet", // Internal setting name
    "SLIDER", // setting type
    ["NATO AI Wallet Amount (Random, Wallet)", "Set the amount of random credits awarded to a killed NATO AI unit. Credits are added to the AI unit's wallet."], // Pretty name and description
    "arma3mercenaries", // Category
    [0, 100000, 1000, 100], // data for this setting: [min, max, default, step size]
    1, // "_isGlobal" flag
    {} // function that will be executed once on mission start and every time the setting is changed.
] call CBA_fnc_addSetting;

[
    "arma3mercenaries_independentKillReward", // Internal setting name
    "SLIDER", // setting type
    ["Independent Kill Reward (Random, Wallet)", "Set the maximum random amount of credits awarded for killing an Independent unit. Credits are added to the player's wallet."], // Pretty name and description
    "arma3mercenaries", // Category
    [0, 100000, 10000, 1000], // data for this setting: [min, max, default, step size]
    1, // "_isGlobal" flag
    {} // function that will be executed once on mission start and every time the setting is changed.
] call CBA_fnc_addSetting;

[
    "arma3mercenaries_independentAiWallet", // Internal setting name
    "SLIDER", // setting type
    ["Independent AI Wallet Amount (Random, Wallet)", "Set the amount of random credits awarded to a killed Independent AI unit. Credits are added to the AI unit's wallet."], // Pretty name and description
    "arma3mercenaries", // Category
    [0, 100000, 1000, 100], // data for this setting: [min, max, default, step size]
    1, // "_isGlobal" flag
    {} // function that will be executed once on mission start and every time the setting is changed.
] call CBA_fnc_addSetting;

[
    "arma3mercenaries_natoPenaltyIndependent", // Internal setting name
    "SLIDER", // setting type
    ["NATO Penalty for Killing Independent (Bank)", "Set the amount of credits deducted from a NATO player's bank account for killing an Independent unit."], // Pretty name and description
    "arma3mercenaries", // Category
    [0, 100000, 10000, 1000], // data for this setting: [min, max, default, step size]
    1, // "_isGlobal" flag
    {} // function that will be executed once on mission start and every time the setting is changed.
] call CBA_fnc_addSetting;

[
    "arma3mercenaries_civilianKillPenalty", // Internal setting name
    "SLIDER", // setting type
    ["Civilian Kill Penalty (Bank)", "Set the amount of credits deducted from a player's bank account for killing a civilian."], // Pretty name and description
    "arma3mercenaries", // Category
    [0, 100000, 10000, 1000], // data for this setting: [min, max, default, step size]
    1, // "_isGlobal" flag
    {} // function that will be executed once on mission start and every time the setting is changed.
] call CBA_fnc_addSetting;

[
    "arma3mercenaries_civilianAiWallet", // Internal setting name
    "SLIDER", // setting type
    ["Civilian AI Wallet Amount (Random, Wallet)", "Set the amount of random credits awarded to a killed Civilian AI unit. Credits are added to the AI unit's wallet."], // Pretty name and description
    "arma3mercenaries", // Category
    [0, 100000, 1000, 100], // data for this setting: [min, max, default, step size]
    1, // "_isGlobal" flag
    {} // function that will be executed once on mission start and every time the setting is changed.
] call CBA_fnc_addSetting;

[
    "arma3mercenaries_deathPenalty", // Internal setting name
    "SLIDER", // setting type
    ["Death Penalty Amount (Bank)", "Set the amount of credits deducted from the player's bank account when they die."], // Pretty name and description
    "arma3mercenaries", // Category
    [0, 100000, 10000, 1000], // data for this setting: [min, max, default, step size]
    1, // "_isGlobal" flag
    {} // function that will be executed once on mission start and every time the setting is changed.
] call CBA_fnc_addSetting;

[
    "arma3mercenaries_markerSize", // Internal setting name
    "SLIDER", // setting type
    ["Death Marker Size", "Set the size of the death markers on the map."], // Pretty name and description
    "arma3mercenaries", // Category
    [0.1, 2, 0.5, 0.1], // data for this setting: [min, max, default, step size]
    1, // "_isGlobal" flag
    {} // function that will be executed once on mission start and every time the setting is changed.
] call CBA_fnc_addSetting;

[
    "arma3mercenaries_killNotificationSound", // Internal setting name
    "CHECKBOX", // setting type
    ["Enable Kill Notification Sound", "Toggles the sound notification that plays when a kill is registered."], // Pretty name and description
    "arma3mercenaries", // Category
    true, // default value
    1, // "_isGlobal" flag
    {} // function that will be executed once on mission start and every time the setting is changed.
] call CBA_fnc_addSetting;

[
    "arma3mercenaries_silentHints", // Internal setting name
    "CHECKBOX", // setting type
    ["Enable Silent Hints", "Toggles the display of silent hints related to kill rewards and penalties."], // Pretty name and description
    "arma3mercenaries", // Category
    true, // default value
    1, // "_isGlobal" flag
    {} // function that will be executed once on mission start and every time the setting is changed.
] call CBA_fnc_addSetting;

[
    "arma3mercenaries_killFeedEnabled", // Internal setting name
    "CHECKBOX", // setting type
    ["Enable Killfeed", "Toggles the display of the killfeed notification."], // Pretty name and description
    "arma3mercenaries", // Category
    true, // default value
    1, // "_isGlobal" flag
    {} // function that will be executed once on mission start and every time the setting is changed.
] call CBA_fnc_addSetting;


after analyzing them, I want you to fix/incorporate the solution for why my killfeed cba setting does not disable the killfeed. your previous attempt was no good. lets try again, possibly with a different solution. the code checks if the unit is a player, before sending a hint. is there a way to makeit do an additiional check to see if the XYZ veriable is set to on or off?


////////////////////////winning///////////////////////

here they are. m going to need an updated summary in summary in markdown format with all of these extremely cool cba features that are all adjustable to their heart's content.
/*
________________	Author : GEORGE FLOROS [GR]	___________	30.07.19	___________

________________ GF Killfeed Script ________________

https://forums.bohemia.net/forums/topic/206593-headshot-killfeed-script/

________________	Enhanced by : BrianV1981	___________	8/10/2024 ___________

________________ arma3mercenaries Kill Script: Kill Notification, Kill Reward, & Death Marker Script ________________

https://forums.bohemia.net/forums/topic/134991-death-marker-script
https://forums.bohemia.net/forums/topic/211383-trigger-on-enemy-death/
https://forums.bohemia.net/forums/topic/225166-help-killed-event-handler/
https://community.bistudio.com/wiki/BIS_fnc_sideID
https://github.com/gruppe-adler/grad-moneyMenu/wiki/addFunds

[unit, amount, addToBankAccount] call grad_moneymenu_fnc_addFunds

Parameter -	Explanation
unit -	Object - The unit or storage object to add or detract from.
amount -	Number - The Amount to add. Negative value to subtract. Total funds will never go below 0.
addToBankAccount (optional)	Bool - Use true to add the amount to the unit's bank account instead of his wallet.

Example
[this, -2000] call grad_moneymenu_fnc_addFunds; // subtracts 2000 from this objects wallet
[storageBox, 100] call grad_moneymenu_fnc_addFunds; // adds 100 to storageBox
[player, 1500, true] call grad_moneymenu_fnc_addFunds; // adds 1500 to unit/player bank

# **Script Summary: arma3mercenaries Killfeed, Reward, and Death Marker System**

## **Overview**
This script manages killfeed notifications, rewards and penalties, and death markers for both AI and player-controlled units in an Arma 3 mission. It handles various scenarios based on the faction of the killed unit and applies appropriate rewards or penalties. The script also creates markers on the map to indicate where a player or AI unit was killed, enhancing the tactical experience of the mission.

## **Core Logic Breakdown**

### **Local Instigator Check**
- The script verifies if the `_instigator` (the unit responsible for the kill) is local to the machine, ensuring that only relevant scenarios are processed.
- It also checks if the killed unit is a human-like entity (`CAManBase`), limiting the script's application to appropriate scenarios.

### **Determine Sides of Killer and Killed Unit**
- The script determines the faction (side) of both the killer and the killed unit by checking their configuration in the game.
- These values are stored in `_sideKiller` and `_sideKilled`.

### **Determine Name and Color of Killed Unit**
- The script retrieves the name and color associated with the killed unit.
  - For AI units, it uses the display name from the game’s configuration.
  - For player units, it uses the player’s in-game name.
- The color of the unit is determined based on their faction and is stored in `_killed_Color`.

### **Calculate Distance Between Killer and Killed Unit**
- The script calculates the distance between the killer and the killed unit, storing this value in `_distance`.

### **Retrieve Weapon Information**
- The weapon used for the kill is identified, and its display name is retrieved from the game’s configuration.
- If no weapon picture is available, the script checks for the vehicle used by the instigator.

### **Friendly Fire Detection**
- If the killer and the killed unit belong to the same faction (friendly fire) and the killer is a player:
  - The script deducts a specified amount of credits from the player’s bank account as a penalty.
  - A hint is sent to the player informing them of the friendly fire incident and the penalty.
- If a player is killed by friendly fire, they receive a specified amount of credits to their bank account (as compensation). A hint is sent to the player with details about the incident.

## **Side-Based Reward and Penalty Logic**

### **Case 0: OPFOR Killed**
- **Reward:** 
  - The killer (player or AI) receives a random reward of up to the configured amount of credits added to their wallet.
  - If the killer is a player, they receive an on-screen hint about the reward.
- **Additional Feature:** 
  - The killed OPFOR unit receives a random amount of credits in their wallet, making their corpse lootable.
- **Killfeed:** 
  - A HUD notification displays the name and distance of the killed OPFOR unit.
- **Death Marker:** 
  - If a player kills an OPFOR AI unit, a red death marker is placed on the map at the location of the kill, labeled with the faction name, killer’s name, weapon used, and the distance.

### **Case 1: NATO Killed**
- **Reward/Penalty:** 
  - If the killer is OPFOR, they receive a reward of up to the configured amount of credits added to their wallet.
  - If the killer is NATO (friendly fire), they are penalized with a specified credit deduction from their bank account, and a hint is shown.
- **Additional Feature:** 
  - The killed NATO unit receives a random amount of credits in their wallet.
- **Killfeed:** 
  - A HUD notification displays the kill information.
- **Death Marker:** 
  - If a player kills a NATO AI unit, a blue death marker is placed on the map, labeled with the faction name, killer’s name, weapon used, and the distance.

### **Case 2: Independent Killed**
- **Reward/Penalty:** 
  - If the killer is OPFOR, they receive a reward of up to the configured amount of credits added to their wallet.
  - If the killer is NATO (NATO allied), they are penalized with a specified credit deduction from their bank account, and a hint is shown.
- **Additional Feature:** 
  - The killed Independent unit receives a random amount of credits in their wallet.
- **Killfeed:** 
  - A HUD notification displays the kill information.
- **Death Marker:** 
  - If a player kills an Independent AI unit, a green death marker is placed on the map, labeled with the faction name, killer’s name, weapon used, and the distance.

### **Case 3: Civilian Killed**
- **Penalty:** 
  - The killer, regardless of side, is penalized with a specified credit deduction from their bank account, and a hint is shown.
- **Additional Feature:** 
  - The killed Civilian unit receives a random amount of credits in their wallet.
- **Killfeed:** 
  - A HUD notification displays the kill information.
- **Death Marker:** 
  - If a player kills a Civilian AI unit, a purple death marker is placed on the map, labeled with the faction name, killer’s name, weapon used, and the distance.

## **Additional Features**

### **Killfeed HUD Notification**
- A visual HUD notification is displayed for every kill, showing the name and distance of the killed unit.

### **Sound Notification**
- A sound is played whenever a kill is registered.

### **AI Death Marker**
- A death marker is placed on the map for the last AI unit killed by a player. The marker’s color corresponds to the side of the killed unit, and the label includes the faction name, killer’s name, weapon used, and distance.

### **Player Death Marker**
- If a player is killed, a red warning marker is placed on the map at their death location, displaying the player’s name.

### **Death Penalty**
- If a player dies, they receive a financial penalty deducted from their bank account, and a hint is displayed informing them of the deduction.

## **In-Game Experience**
- **Rewards and Penalties:** 
  - Players and AI units receive financial rewards or penalties based on their actions, such as killing enemy units, committing friendly fire, or killing civilians.
- **Killfeed:** 
  - Players receive immediate visual feedback about their kills through HUD notifications, enhancing the gameplay experience.
- **Death Markers:** 
  - Markers placed on the map provide visual cues for the locations of recent kills, helping players track significant events during the mission.
- **Death Penalty:** 
  - Players face financial consequences for dying, encouraging more careful and strategic gameplay.

*This comprehensive system is designed to enhance the tactical and immersive aspects of arma3mercenaries missions by rewarding or penalizing actions based on faction dynamics while also providing players with clear and immediate feedback through visual and audio notifications.*


*/

diag_log "//________________ arma3mercenaries Kill Notification, Kill Reward, & Death Marker Script ________________";

addMissionEventHandler ["entityKilled", {
    params ["_killed", "_killer", "_instigator"];
    
    // If the instigator is null (e.g., road kill), set the killer as the instigator
    if (isNull _instigator) then { _instigator = _killer };

    // Check if the instigator is local to the machine and the killed unit is a human-like unit
    if (local _instigator && _killed isKindOf "CAManBase") then {
        // Determine the sides of the killer and the killed unit
        private _sideKiller = getNumber (configFile >> "cfgVehicles" >> typeOf _instigator >> "side");
        private _sideKilled = getNumber (configFile >> "cfgVehicles" >> typeOf _killed >> "side");

        // Determine the name and color of the killed unit
        private _killed_Name = "";
        private _kill_HUD = "";
        private _killed_Color = (side group _killed call BIS_fnc_sideColor) call BIS_fnc_colorRGBtoHTML;

        // If the killed unit is AI, get its display name from the config
        if (!(isPlayer _killed)) then {
            _killed_Name = getText (configFile >> "CfgVehicles" >> format["%1", typeOf _killed] >> "Displayname");
        } else {
            // If the killed unit is a player, use their in-game name
            _killed_Name = name _killed;
        };

        // Calculate the distance between the killer and the killed unit
        private _distance = _instigator distance2D _killed;

        // Get the weapon used for the kill and its display name
        private _weaponClass = currentWeapon _instigator;
        private _weaponDisplayName = getText(configFile >> "CfgWeapons" >> _weaponClass >> "displayName");

        // Get the weapon picture or vehicle picture if no weapon picture is available
        private _pictureweapon = getText(configFile >> "CfgWeapons" >> _weaponClass >> "picture");
        if (_pictureweapon == "") then {
            _weaponClass = typeOf (vehicle _instigator);
            _pictureweapon = getText(configFile >> "CfgVehicles" >> _weaponClass >> "picture");
        };

        // Get a readable name for the faction
        private _factionName = switch (_sideKilled) do {
            case 0: { "OPFOR" };
            case 1: { "NATO" };
            case 2: { "Independent" };
            case 3: { "Civilian" };
            default { "Unknown Faction" };
        };

        // Check if the kill was friendly fire (same side) and the instigator is a player
        if (_sideKiller == _sideKilled && isPlayer _instigator) then {
            // **Friendly Fire Penalty (Configurable via CBA)**
            private _friendlyFirePenalty = arma3mercenaries_friendlyFirePenalty;
            [_instigator, -_friendlyFirePenalty, true] call grad_moneymenu_fnc_addFunds;

            // Send a hint to the instigator about the friendly fire
            private _message = format ["You killed a member of %1! %2 cr. has been deducted from your bank account.", _factionName, _friendlyFirePenalty];
            if (arma3mercenaries_silentHints) then {
                [_message] remoteExec ["hintSilent", _instigator];
            };
        };

        // Check if the player was killed by friendly fire
        if (isPlayer _killed && _sideKiller == _sideKilled && _instigator != _killed) then {
            // **Friendly Fire Compensation (Configurable via CBA)**
            private _friendlyFireCompensation = arma3mercenaries_friendlyFireCompensation;
            [_killed, _friendlyFireCompensation, true] call grad_moneymenu_fnc_addFunds;

            // Send a direct message to the player about the friendly fire
            private _message = format ["%1 were killed by friendly fire by %2 with a %3 from %4m. %5 cr. has been wired to your bank account.", name _killed, name _instigator, _weaponDisplayName, floor _distance, _friendlyFireCompensation];
            if (arma3mercenaries_silentHints) then {
                [_message] remoteExec ["hintSilent", _killed];
            };
        };

        // Switch-case structure to handle different scenarios based on the side of the killed unit
        switch (_sideKilled) do {
            case 0: {
                // OPFOR unit killed
                // **OPFOR Kill Reward (Configurable via CBA)**
                private _opforKillLoot = arma3mercenaries_opforKillReward;
                [_instigator, random _opforKillLoot] call grad_moneymenu_fnc_addFunds;

                // If the instigator is a player, send them a hint about the reward
                if (isPlayer _instigator) then {
                    private _message = format ["You killed a member of %1, good job! 0-%2 cr. has been added to your wallet. Don't forget to check the corpse for more money!", _factionName, _opforKillLoot];
                    if (arma3mercenaries_silentHints) then {
                        [_message] remoteExec ["hintSilent", _instigator];
                    };
                };

                // **OPFOR AI Wallet Amount (Configurable via CBA)**
                private _opforAiWallet = arma3mercenaries_opforAiWallet;
                [_killed, random _opforAiWallet] call grad_moneymenu_fnc_addFunds;
            };
            case 1: {
                // NATO unit killed
                if (_sideKiller == 0) then {
                    // OPFOR killed NATO
                    // **NATO Kill Reward (Configurable via CBA)**
                    private _natoKillReward = arma3mercenaries_natoKillReward;
                    [_instigator, random _natoKillReward] call grad_moneymenu_fnc_addFunds;

                    // If the instigator is a player, send them a hint about the reward
                    if (isPlayer _instigator) then {
                        private _message = format ["You killed a member of %1, good job! 0-%2 cr. has been added to your wallet.", _factionName, _natoKillReward];
                        if (arma3mercenaries_silentHints) then {
                            [_message] remoteExec ["hintSilent", _instigator];
                        };
                    };
                };

                // **NATO AI Wallet Amount (Configurable via CBA)**
                private _natoAiWallet = arma3mercenaries_natoAiWallet;
                if (!isPlayer _killed) then {
                    [_killed, random _natoAiWallet] call grad_moneymenu_fnc_addFunds;
                };
            };
            case 2: {
                // Independent unit killed
                if (_sideKiller == 0) then {
                    // OPFOR killed Independent
                    // **Independent Kill Reward (Configurable via CBA)**
                    private _independentKillReward = arma3mercenaries_independentKillReward;
                    [_instigator, random _independentKillReward] call grad_moneymenu_fnc_addFunds;

                    // If the instigator is a player, send them a hint about the reward
                    if (isPlayer _instigator) then {
                        private _message = format ["You killed a member of %1, good job! 0-%2 cr. has been added to your wallet.", _factionName, _independentKillReward];
                        if (arma3mercenaries_silentHints) then {
                            [_message] remoteExec ["hintSilent", _instigator];
                        };
                    };
                } else {
                    // NATO killed Independent (NATO allied)
                    // **NATO Penalty for Killing Independent (Configurable via CBA)**
                    private _natoPenaltyIndependent = arma3mercenaries_natoPenaltyIndependent;
                    [_instigator, -_natoPenaltyIndependent, true] call grad_moneymenu_fnc_addFunds;

                    // If the instigator is a player, send them a hint about the penalty
                    if (isPlayer _instigator) then {
                        private _message = format ["You killed a member of %1! %2 cr. has been deducted from your bank account.", _factionName, _natoPenaltyIndependent];
                        if (arma3mercenaries_silentHints) then {
                            [_message] remoteExec ["hintSilent", _instigator];
                        };
                    };
                };

                // **Independent AI Wallet Amount (Configurable via CBA)**
                private _independentAiWallet = arma3mercenaries_independentAiWallet;
                if (!isPlayer _killed) then {
                    [_killed, random _independentAiWallet] call grad_moneymenu_fnc_addFunds;
                };
            };
            case 3: {
                // Civilian unit killed
                // **Civilian Kill Penalty (Configurable via CBA)**
                private _civilianKillPenalty = arma3mercenaries_civilianKillPenalty;
                [_instigator, -_civilianKillPenalty, true] call grad_moneymenu_fnc_addFunds;

                // If the instigator is a player, send them a hint about the penalty
                if (isPlayer _instigator) then {
                    private _message = format ["You killed a member of %1! %2 cr. has been deducted from your bank account.", _factionName, _civilianKillPenalty];
                    if (arma3mercenaries_silentHints) then {
                        [_message] remoteExec ["hintSilent", _instigator];
                    };
                };

                // **Civilian AI Wallet Amount (Configurable via CBA)**
                private _civilianAiWallet = arma3mercenaries_civilianAiWallet;
                if (!isPlayer _killed) then {
                    [_killed, random _civilianAiWallet] call grad_moneymenu_fnc_addFunds;
                };
            };
        };

        // **Killfeed HUD Display Duration (Configurable via CBA)**
        // Additional check for killfeed setting
        if (isPlayer _instigator && arma3mercenaries_killFeedEnabled) then {
            private _killFeedDuration = arma3mercenaries_killFeedDuration;
            _kill_HUD = format["<t size='0.3'>  Killed  <t size='0.5'> <t color='%1'>  %2  <t color='#%1'>  %3 m</t>", _killed_Color, _killed_Name, floor _distance];
            [_kill_HUD, 0, 0, _killFeedDuration, 1, -1, 7017] spawn bis_fnc_dynamicText;

            // **Killfeed Sound (Configurable via CBA)**
            private _killSoundEnabled = arma3mercenaries_killNotificationSound;
            if (_killSoundEnabled) then {
                playSound "Killfeed_notification";
            };
        };

        // **Death Marker Size (Configurable via CBA)**
        if (!isPlayer _killed && isPlayer _instigator) then {
            private _mrkName = "LastEnemyKilled";
            // Delete any existing marker with the same name
            deleteMarker _mrkName;

            // Determine the marker color based on the side of the killed unit
            private _markerColor = switch (_sideKilled) do {
                case 0: { "ColorEAST" };         // OPFOR
                case 1: { "ColorWEST" };        // NATO
                case 2: { "colorIndependent" }; // Independent
                case 3: { "ColorCIV" };         // Civilian
            };

            // Create a new marker at the AI's position
            private _markerSize = arma3mercenaries_markerSize;
            private _m = createMarker [_mrkName, getPosATL _killed];
            // Set the shape of the marker to an icon
            _m setMarkerShape "ICON";
            // Set the type of the marker to a dot icon
            _m setMarkerType "mil_dot";
            // Set the color of the marker based on the killed unit's side
            _m setMarkerColor _markerColor;
            // Set the size of the marker
            _m setMarkerSize [_markerSize, _markerSize];
            // Set the text of the marker to include the faction, killer’s name, weapon used, and distance
            _m setMarkerText format ["%1 killed by %2 with a %3 from %4m", _factionName, name _instigator, _weaponDisplayName, floor _distance];
        };

        // Player Death Marker - Only for non-AI players
        if (isPlayer _killed) then {
            private _mrkName = format ["%1", name _killed];
            // Delete any existing marker with the same name
            deleteMarker _mrkName;

            // Create a new marker at the player's position
            private _markerSize = arma3mercenaries_markerSize;
            private _m = createMarker [_mrkName, getPosATL _killed];
            // Set the shape of the marker to an icon
            _m setMarkerShape "ICON";
            // Set the type of the marker to a warning icon
            _m setMarkerType "mil_warning";
            // Set the color of the marker to red
            _m setMarkerColor "ColorRed";
            // Set the size of the marker
            _m setMarkerSize [_markerSize, _markerSize];
            // Set the text of the marker to the player's name
            _m setMarkerText name _killed;
        };
    };

    // **Death Penalty Amount (Configurable via CBA)**
    if (isPlayer _killed && _sideKiller != _sideKilled) then {
        private _deathPenalty = arma3mercenaries_deathPenalty;
        [_killed, -_deathPenalty, true] call grad_moneymenu_fnc_addFunds;

        // Send a hint to the killed player notifying them of the penalty
        private _message = format ["You died! %1 cr. has been deducted from your bank account.", _deathPenalty];
        if (arma3mercenaries_silentHints) then {
            [_message] remoteExec ["hintSilent", _killed];
        };
    };
}];

'''

/*
arma3mercenaries_killCfg.hpp

by BrianV1981
*/

class CfgSettings {
    class CBA {
        class arma3mercenaries {

            // Killfeed Display Duration
            class killFeedDuration {
                title = "Killfeed Display Duration";
                description = "Adjust the duration (in seconds) the killfeed notification remains on screen.";
                typeName = "NUMBER";
                value = 5; // Default value
                values[] = {1, 20}; // Min: 1 second, Max: 20 seconds
            };

            // Friendly Fire Penalty (Bank)
            class friendlyFirePenalty {
                title = "Friendly Fire Penalty (Bank)";
                description = "Sets the amount of credits deducted from the player's bank account for friendly fire incidents.";
                typeName = "NUMBER";
                value = 10000; // Default value
                values[] = {0, 100000}; // Min: 0 credits, Max: 100000 credits
            };

            // Friendly Fire Compensation (Bank)
            class friendlyFireCompensation {
                title = "Friendly Fire Compensation (Bank)";
                description = "Sets the amount of credits awarded to a player when killed by friendly fire. Credits are added to the player's bank account.";
                typeName = "NUMBER";
                value = 20000; // Default value
                values[] = {0, 100000}; // Min: 0 credits, Max: 100000 credits
            };

            // OPFOR Kill Reward (Random, Wallet)
            class opforKillReward {
                title = "OPFOR Kill Reward (Random, Wallet)";
                description = "Sets the maximum random amount of credits awarded for killing an OPFOR unit. Credits are added to the player's wallet.";
                typeName = "NUMBER";
                value = 10000; // Default value
                values[] = {0, 100000}; // Min: 0 credits, Max: 100000 credits
            };

            // OPFOR AI Wallet Amount (Random, Wallet)
            class opforAiWallet {
                title = "OPFOR AI Wallet Amount (Random, Wallet)";
                description = "Sets the maximum random amount of credits found on a killed OPFOR AI unit. Credits are added to the AI unit's wallet.";
                typeName = "NUMBER";
                value = 10000; // Default value
                values[] = {0, 100000}; // Min: 0 credits, Max: 100000 credits
            };

            // NATO Kill Reward (Random, Wallet)
            class natoKillReward {
                title = "NATO Kill Reward (Random, Wallet)";
                description = "Sets the maximum random amount of credits awarded for killing a NATO unit. Credits are added to the player's wallet.";
                typeName = "NUMBER";
                value = 10000; // Default value
                values[] = {0, 100000}; // Min: 0 credits, Max: 100000 credits
            };

            // NATO AI Wallet Amount (Random, Wallet)
            class natoAiWallet {
                title = "NATO AI Wallet Amount (Random, Wallet)";
                description = "Sets the maximum random amount of credits found on a killed NATO AI unit. Credits are added to the AI unit's wallet.";
                typeName = "NUMBER";
                value = 1000; // Default value
                values[] = {0, 100000}; // Min: 0 credits, Max: 100000 credits
            };

            // Independent Kill Reward (Random, Wallet)
            class independentKillReward {
                title = "Independent Kill Reward (Random, Wallet)";
                description = "Sets the maximum random amount of credits awarded for killing an Independent unit. Credits are added to the player's wallet.";
                typeName = "NUMBER";
                value = 10000; // Default value
                values[] = {0, 100000}; // Min: 0 credits, Max: 100000 credits
            };

            // Independent AI Wallet Amount (Random, Wallet)
            class independentAiWallet {
                title = "Independent AI Wallet Amount (Random, Wallet)";
                description = "Sets the maximum random amount of credits found on a killed Independent AI unit. Credits are added to the AI unit's wallet.";
                typeName = "NUMBER";
                value = 1000; // Default value
                values[] = {0, 100000}; // Min: 0 credits, Max: 100000 credits
            };

            // NATO Penalty for Killing Independent (Bank)
            class natoPenaltyIndependent {
                title = "NATO Penalty for Killing Independent (Bank)";
                description = "Sets the amount of credits deducted from a NATO player's bank account for killing an Independent unit.";
                typeName = "NUMBER";
                value = 10000; // Default value
                values[] = {0, 100000}; // Min: 0 credits, Max: 100000 credits
            };

            // Civilian Kill Penalty (Bank)
            class civilianKillPenalty {
                title = "Civilian Kill Penalty (Bank)";
                description = "Sets the amount of credits deducted from a player's bank account for killing a civilian.";
                typeName = "NUMBER";
                value = 10000; // Default value
                values[] = {0, 100000}; // Min: 0 credits, Max: 100000 credits
            };

            // Civilian AI Wallet Amount (Random, Wallet)
            class civilianAiWallet {
                title = "Civilian AI Wallet Amount (Random, Wallet)";
                description = "Sets the maximum random amount of credits found on a killed Civilian AI unit. Credits are added to the AI unit's wallet.";
                typeName = "NUMBER";
                value = 1000; // Default value
                values[] = {0, 100000}; // Min: 0 credits, Max: 100000 credits
            };

            // Death Penalty Amount (Bank)
            class deathPenalty {
                title = "Death Penalty Amount (Bank)";
                description = "Sets the amount of credits deducted from the player's bank account when they die.";
                typeName = "NUMBER";
                value = 10000; // Default value
                values[] = {0, 100000}; // Min: 0 credits, Max: 100000 credits
            };

            // Marker Size
            class markerSize {
                title = "Death Marker Size";
                description = "Sets the size of the death markers on the map.";
                typeName = "NUMBER";
                value = 0.5; // Default value
                values[] = {0.1, 2}; // Min: 0.1, Max: 2
            };

            // Kill Notification Sound Toggle
            class killNotificationSound {
                title = "Enable Kill Notification Sound";
                description = "Toggles the sound notification that plays when a kill is registered.";
                typeName = "BOOL";
                value = 1; // Default value: 1 (enabled)
            };

            // Silent Hints Toggle
            class silentHints {
                title = "Enable Silent Hints";
                description = "Toggles the display of silent hints related to kill rewards and penalties.";
                typeName = "BOOL";
                value = 1; // Default value: 1 (enabled)
            };

            // Killfeed Enabled Toggle
            class killFeedEnabled {
                title = "Enable Killfeed";
                description = "Toggles the display of the killfeed notification.";
                typeName = "BOOL";
                value = 1; // Default value: 1 (enabled)
            };
        };
    };
};


// XEH_postInit.sqf
// Initialize CBA settings for arma3mercenaries
if (isServer) then {
    ["initialize", "arma3mercenaries"] call CBA_settings_fnc_init;
};

// CBA settings for arma3mercenaries Kill Script
[
    "arma3mercenaries_killFeedDuration", // Internal setting name
    "SLIDER", // setting type
    ["Killfeed Display Duration", "Adjust the duration (in seconds) the killfeed notification remains on screen."], // Pretty name and description
    "arma3mercenaries", // Category
    [1, 20, 5, 1], // data for this setting: [min, max, default, number of shown trailing decimals]
    1, // "_isGlobal" flag
    {} // function that will be executed once on mission start and every time the setting is changed.
] call CBA_fnc_addSetting;

[
    "arma3mercenaries_friendlyFirePenalty", // Internal setting name
    "SLIDER", // setting type
    ["Friendly Fire Penalty (Bank)", "Set the amount of credits deducted for friendly fire incidents from the player's bank account."], // Pretty name and description
    "arma3mercenaries", // Category
    [0, 100000, 10000, 1000], // data for this setting: [min, max, default, step size]
    1, // "_isGlobal" flag
    {} // function that will be executed once on mission start and every time the setting is changed.
] call CBA_fnc_addSetting;

[
    "arma3mercenaries_friendlyFireCompensation", // Internal setting name
    "SLIDER", // setting type
    ["Friendly Fire Compensation (Bank)", "Set the amount of credits awarded to a player when killed by friendly fire. Credits are added to the player's bank account."], // Pretty name and description
    "arma3mercenaries", // Category
    [0, 100000, 20000, 1000], // data for this setting: [min, max, default, step size]
    1, // "_isGlobal" flag
    {} // function that will be executed once on mission start and every time the setting is changed.
] call CBA_fnc_addSetting;

[
    "arma3mercenaries_opforKillReward", // Internal setting name
    "SLIDER", // setting type
    ["OPFOR Kill Reward (Random, Wallet)", "Set the maximum random amount of credits awarded for killing an OPFOR unit. Credits are added to the player's wallet."], // Pretty name and description
    "arma3mercenaries", // Category
    [0, 100000, 10000, 1000], // data for this setting: [min, max, default, step size]
    1, // "_isGlobal" flag
    {} // function that will be executed once on mission start and every time the setting is changed.
] call CBA_fnc_addSetting;

[
    "arma3mercenaries_opforAiWallet", // Internal setting name
    "SLIDER", // setting type
    ["OPFOR AI Wallet Amount (Random, Wallet)", "Set the amount of random credits awarded to a killed OPFOR AI unit. Credits are added to the AI unit's wallet."], // Pretty name and description
    "arma3mercenaries", // Category
    [0, 100000, 10000, 1000], // data for this setting: [min, max, default, step size]
    1, // "_isGlobal" flag
    {} // function that will be executed once on mission start and every time the setting is changed.
] call CBA_fnc_addSetting;

[
    "arma3mercenaries_natoKillReward", // Internal setting name
    "SLIDER", // setting type
    ["NATO Kill Reward (Random, Wallet)", "Set the maximum random amount of credits awarded for killing a NATO unit. Credits are added to the player's wallet."], // Pretty name and description
    "arma3mercenaries", // Category
    [0, 100000, 10000, 1000], // data for this setting: [min, max, default, step size]
    1, // "_isGlobal" flag
    {} // function that will be executed once on mission start and every time the setting is changed.
] call CBA_fnc_addSetting;

[
    "arma3mercenaries_natoAiWallet", // Internal setting name
    "SLIDER", // setting type
    ["NATO AI Wallet Amount (Random, Wallet)", "Set the amount of random credits awarded to a killed NATO AI unit. Credits are added to the AI unit's wallet."], // Pretty name and description
    "arma3mercenaries", // Category
    [0, 100000, 1000, 100], // data for this setting: [min, max, default, step size]
    1, // "_isGlobal" flag
    {} // function that will be executed once on mission start and every time the setting is changed.
] call CBA_fnc_addSetting;

[
    "arma3mercenaries_independentKillReward", // Internal setting name
    "SLIDER", // setting type
    ["Independent Kill Reward (Random, Wallet)", "Set the maximum random amount of credits awarded for killing an Independent unit. Credits are added to the player's wallet."], // Pretty name and description
    "arma3mercenaries", // Category
    [0, 100000, 10000, 1000], // data for this setting: [min, max, default, step size]
    1, // "_isGlobal" flag
    {} // function that will be executed once on mission start and every time the setting is changed.
] call CBA_fnc_addSetting;

[
    "arma3mercenaries_independentAiWallet", // Internal setting name
    "SLIDER", // setting type
    ["Independent AI Wallet Amount (Random, Wallet)", "Set the amount of random credits awarded to a killed Independent AI unit. Credits are added to the AI unit's wallet."], // Pretty name and description
    "arma3mercenaries", // Category
    [0, 100000, 1000, 100], // data for this setting: [min, max, default, step size]
    1, // "_isGlobal" flag
    {} // function that will be executed once on mission start and every time the setting is changed.
] call CBA_fnc_addSetting;

[
    "arma3mercenaries_natoPenaltyIndependent", // Internal setting name
    "SLIDER", // setting type
    ["NATO Penalty for Killing Independent (Bank)", "Set the amount of credits deducted from a NATO player's bank account for killing an Independent unit."], // Pretty name and description
    "arma3mercenaries", // Category
    [0, 100000, 10000, 1000], // data for this setting: [min, max, default, step size]
    1, // "_isGlobal" flag
    {} // function that will be executed once on mission start and every time the setting is changed.
] call CBA_fnc_addSetting;

[
    "arma3mercenaries_civilianKillPenalty", // Internal setting name
    "SLIDER", // setting type
    ["Civilian Kill Penalty (Bank)", "Set the amount of credits deducted from a player's bank account for killing a civilian."], // Pretty name and description
    "arma3mercenaries", // Category
    [0, 100000, 10000, 1000], // data for this setting: [min, max, default, step size]
    1, // "_isGlobal" flag
    {} // function that will be executed once on mission start and every time the setting is changed.
] call CBA_fnc_addSetting;

[
    "arma3mercenaries_civilianAiWallet", // Internal setting name
    "SLIDER", // setting type
    ["Civilian AI Wallet Amount (Random, Wallet)", "Set the amount of random credits awarded to a killed Civilian AI unit. Credits are added to the AI unit's wallet."], // Pretty name and description
    "arma3mercenaries", // Category
    [0, 100000, 1000, 100], // data for this setting: [min, max, default, step size]
    1, // "_isGlobal" flag
    {} // function that will be executed once on mission start and every time the setting is changed.
] call CBA_fnc_addSetting;

[
    "arma3mercenaries_deathPenalty", // Internal setting name
    "SLIDER", // setting type
    ["Death Penalty Amount (Bank)", "Set the amount of credits deducted from the player's bank account when they die."], // Pretty name and description
    "arma3mercenaries", // Category
    [0, 100000, 10000, 1000], // data for this setting: [min, max, default, step size]
    1, // "_isGlobal" flag
    {} // function that will be executed once on mission start and every time the setting is changed.
] call CBA_fnc_addSetting;

[
    "arma3mercenaries_markerSize", // Internal setting name
    "SLIDER", // setting type
    ["Death Marker Size", "Set the size of the death markers on the map."], // Pretty name and description
    "arma3mercenaries", // Category
    [0.1, 2, 0.5, 0.1], // data for this setting: [min, max, default, step size]
    1, // "_isGlobal" flag
    {} // function that will be executed once on mission start and every time the setting is changed.
] call CBA_fnc_addSetting;

[
    "arma3mercenaries_killNotificationSound", // Internal setting name
    "CHECKBOX", // setting type
    ["Enable Kill Notification Sound", "Toggles the sound notification that plays when a kill is registered."], // Pretty name and description
    "arma3mercenaries", // Category
    true, // default value
    1, // "_isGlobal" flag
    {} // function that will be executed once on mission start and every time the setting is changed.
] call CBA_fnc_addSetting;

[
    "arma3mercenaries_silentHints", // Internal setting name
    "CHECKBOX", // setting type
    ["Enable Silent Hints", "Toggles the display of silent hints related to kill rewards and penalties."], // Pretty name and description
    "arma3mercenaries", // Category
    true, // default value
    1, // "_isGlobal" flag
    {} // function that will be executed once on mission start and every time the setting is changed.
] call CBA_fnc_addSetting;

[
    "arma3mercenaries_killFeedEnabled", // Internal setting name
    "CHECKBOX", // setting type
    ["Enable Killfeed", "Toggles the display of the killfeed notification."], // Pretty name and description
    "arma3mercenaries", // Category
    true, // default value
    1, // "_isGlobal" flag
    {} // function that will be executed once on mission start and every time the setting is changed.
] call CBA_fnc_addSetting;




////////just keep winning/////petrsitent kill/death counter idea////////////this is just an idea, but it seems easy and legit, I would make a simple interface when you hit escape////////////

Given the setup you already have with event triggers and player data, adding a simple kill and death counter that persists could be a straightforward enhancement. Here’s how you could approach it:

Kill Counter
Concept: Each time a player gets a kill, increment their personal kill counter. This value could persist across sessions if you store it using a persistence framework or save it in a file.
Implementation:
Use the entityKilled event handler to track kills.
Store the kill count in a variable associated with the player, such as in their profile namespace or a database if persistence is needed.
Death Counter
Concept: Similar to the kill counter, but this would increment each time the player dies.
Implementation:
Use the entityKilled event handler to track deaths for each player.
Store the death count similarly to the kill count.
Basic Example
Here’s a very simple example of how you could implement this:

sqf
Copy code
// In your XEH_postInit.sqf or main script

// Initialize kill and death counters if not already done
if (isNil {player getVariable "arma3mercenaries_kills"}) then {
    player setVariable ["arma3mercenaries_kills", 0, true];
};
if (isNil {player getVariable "arma3mercenaries_deaths"}) then {
    player setVariable ["arma3mercenaries_deaths", 0, true];
};

addMissionEventHandler ["entityKilled", {
    params ["_killed", "_killer", "_instigator"];

    if (isPlayer _killer) then {
        // Increment the killer's kill counter
        private _currentKills = _killer getVariable ["arma3mercenaries_kills", 0];
        _killer setVariable ["arma3mercenaries_kills", _currentKills + 1, true];
    };

    if (isPlayer _killed) then {
        // Increment the killed player's death counter
        private _currentDeaths = _killed getVariable ["arma3mercenaries_deaths", 0];
        _killed setVariable ["arma3mercenaries_deaths", _currentDeaths + 1, true];
    };
}];

// Optionally, display the kill and death counters to the player (e.g., in a hint or UI)
player addEventHandler ["Respawn", {
    private _kills = player getVariable ["arma3mercenaries_kills", 0];
    private _deaths = player getVariable ["arma3mercenaries_deaths", 0];
    hint format ["Kills: %1\nDeaths: %2", _kills, _deaths];
}];
Persistence
If you want these counters to persist across sessions, you could save them to a file or use a persistence framework like grad-persistence. For a simple implementation, storing the counts in a player's profile namespace could work:

sqf
Copy code
profileNamespace setVariable ["arma3mercenaries_kills", player getVariable "arma3mercenaries_kills"];
profileNamespace setVariable ["arma3mercenaries_deaths", player getVariable "arma3mercenaries_deaths"];
saveProfileNamespace;
This way, when the player joins again, you can retrieve the values with:

sqf
Copy code
player setVariable ["arma3mercenaries_kills", profileNamespace getVariable "arma3mercenaries_kills", true];
player setVariable ["arma3mercenaries_deaths", profileNamespace getVariable "arma3mercenaries_deaths", true];
Summary
Kill Counter: Tracks the number of kills a player has made.
Death Counter: Tracks the number of times a player has died.
Persistence: Optional, for carrying these values across sessions.
Implementation: Straightforward, leveraging existing event handlers and player variables.
This approach keeps things simple and leverages the existing infrastructure you already have in place.





//////////////////////////////////////